# https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax
# https://docs.github.com/en/actions/reference/runners/github-hosted-runners
name: Build Analyze Check
on: [push, pull_request]
jobs:
  macos_check_job:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        run: brew install soapysdr librtlsdr
      - name: Configure
        run: cmake -B build
      - name: Build
        run: cmake --build build -- -j $(nproc)
      - name: Test
        run: |
          cmake --build build --target test || \
          { cat build/Testing/Temporary/LastTest.log && false; }

  build_check_job:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cmake-generator: [Unix Makefiles, Ninja]
        cmake-build-type: [Debug, Release]
    name: Build ${{ matrix.cmake-build-type }} ${{ matrix.cmake-generator }}
    steps:
      - uses: actions/checkout@v4
      - name: Apt Update
        run: sudo apt-get update -q -y --no-install-recommends
      - name: Install Build Tools
        run: sudo apt-get install -q -y --no-install-recommends cmake ninja-build
      - name: Install Libraries
        run: sudo apt-get install -q -y --no-install-recommends libsoapysdr-dev librtlsdr-dev
      - name: Versions
        run: |
          cmake --version
          lsb_release -a
          make --version
          echo Ninja Version: $(ninja --version)
          uname -a
      - name: Configure
        run: |
          cmake \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} \
            -DENABLE_RTLSDR=OFF -DENABLE_SOAPYSDR=OFF \
            -G "${{ matrix.cmake-generator }}"
      - name: Build
        run: cmake --build build
      - name: Test
        run: |
          cmake --build build --target test || \
          { cat build/Testing/Temporary/LastTest.log && false; }

  doc_check_job:
    runs-on: ubuntu-latest
    name: Build documentation
    steps:
      - uses: actions/checkout@v4
      - name: Install Doxygen
        run: |
          sudo apt-get update -q -y
          sudo apt-get install -q -y --no-install-recommends cmake ninja-build
          sudo apt-get install -q -y doxygen
      - name: Configure CMake+Ninja
        run: cmake -GNinja -B ${{ runner.workspace }}/b/ninja -DBUILD_DOCUMENTATION=ON -DENABLE_RTLSDR=OFF -DENABLE_SOAPYSDR=OFF
      - name: Build CMake+Ninja
        run: cmake --build ${{ runner.workspace }}/b/ninja -- doc_doxygen

  style_check_job:
    runs-on: ubuntu-latest
    name: Check code style
    steps:
      - uses: actions/checkout@v4
      - name: Style Check
        uses: ./.github/actions/style-check

  maintainer_update_check_job:
    runs-on: ubuntu-latest
    name: Needs maintainer_update
    steps:
      - uses: actions/checkout@v4
      - name: Working directory clean excluding untracked files
        run: |
          ./maintainer_update.py
          [ -z "$(git status --untracked-files=no --porcelain)" ]

  symbolizer_check_job:
    runs-on: ubuntu-latest
    name: Check symbol errors
    steps:
      - uses: actions/checkout@v4
      - name: Symbolizer report
        run: |
          ./tests/symbolizer.py check

  analyzer_check_job:
    # https://github.com/actions/virtual-environments
    # - Ubuntu 24.04 ubuntu-24.04
    # - Ubuntu 22.04 ubuntu-22.04
    # - Ubuntu 20.04 ubuntu-20.04
    # https://apt.llvm.org/
    # - Noble (24.04)
    # - Jammy (22.04)
    # - Focal (20.04)
    # - Bionic (18.04)
    runs-on: ubuntu-24.04
    name: Analyze with Clang
    steps:
      - uses: actions/checkout@v4
      - name: Install Clang
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key 2>/dev/null | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main' -y
          sudo apt-get update -q
          sudo apt-get install -q -y clang-20 lld-20 libc++-20-dev libc++abi-20-dev clang-tools-20
      - name: Clang Analyzer
        # excludes include/mongoose.h src/mongoose.c include/jsmn.h src/jsmn.c
        # exit code 1 if there is output
        run: |
          clang -Iinclude -DTHREADS --analyze -Xanalyzer -analyzer-output=text -Xanalyzer -analyzer-disable-checker=deadcode.DeadStores include/[a-ikln-z]*.h src/[a-ikln-z]*.c src/devices/*.c 2>&1 | tee analyzer.out
          [ ! -s analyzer.out ]
